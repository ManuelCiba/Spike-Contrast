% This script generates the test data which are used in the paper 
% "Spike-contrast: A novel time scale independent and multivariate measure
% of spike train synchrony"
% Author: Manuel Ciba
% Year: 2017

clear all
close all
clc

path_full=mfilename('fullpath'); % get path of this script
[path,~] = fileparts(path_full); % separate path from filename
cd(path)



%% Load File

N=20; % number of trials per shuffled point

%% Select Shuffling Methods:
shuffleMethods={ ...
    'poisson_spikes_rate_1_5_T300', ...
    'mc2_poisson_bursts_rate_0_0_5_T3600', ...
    'bursts_in_bursts2', ...
    };
shuffleMethod=shuffleMethods([1,2,3]);
% used in paper:
% 1-poisson_spikes_rate_1_5_T300
% 1-mc2_poisson_bursts_rate_0_0_5_T3600
% Izhikevich_org_recDur2_S1to0_nonlinear_new (generated by another script!)
% 1-bursts_in_bursts2

x=0:0.05:1; % linear x axis (0: no spikes shared, 1: all spikes identical)

%% for every shuffling method
for m=1:size(shuffleMethod,2)
    
    %% for every sample
    for n=1:N
        
        %% for every percentage value
        for p=1:length(x)
            percentage=x(p);
            disp(num2str(percentage*100))
            
            clear M_TS
            
            % create poisson spike train with shared spikes in percent
            % (spikerate = const., timestamp = var.)
            if strcmp(shuffleMethod{m},'poisson_spikes_rate_1_5_T300')
                rate=1.5; % in spikes per second
                rec_dur=300;
                % 1) select rate
                % 2) create TS_share with rate_share = percentage * rate
                % (note: here 1-percentage is used to begin with slight changes to full desynchronization)
                % 3) create TS1 with rate1 = rate2 = rate_tmp = rate * (1-percentage)
                % 4) TS1 = [TS1 TS_share], TS2 = [TS2 TS_share], (rate1 = rate1 + rate_share)
                rate_share = rate * (1-percentage); % calculate new spike rate for the shared spike train (=spikes that are in TS1 and TS2)
                TS_share = getSpikeTrainPoisson3(rate_share,rec_dur,1); % rate, rec_dur, numEl
                rate_tmp = rate * percentage; % spike rate for second spike train (without shared spikes)
                TS_tmp = getSpikeTrainPoisson3(rate_tmp,rec_dur,1); % rate, rec_dur, numEl
                TS1 = sort([TS_share; TS_tmp]);
                TS_tmp = getSpikeTrainPoisson3(rate_tmp,rec_dur,1); % rate, rec_dur, numEl
                TS2 = sort([TS_share; TS_tmp]);
                Cell_TS{1}=TS1;
                Cell_TS{2}=TS2;
                M_TS = TS_Cell2M(Cell_TS);
            end
            
            
            % create poisson burst train with shared spikes in percent (same
            % principal as "poisson_spiketrain_...")
            if strcmp(shuffleMethod{m},'mc2_poisson_bursts_rate_0_0_5_T3600')
                rate=0.05; % in spikes per second
                rec_dur=3600;
                % 1) select rate
                % 2) create TS_share with rate_share = percentage * rate
                % (note: here 1-percentage is used to begin with slight changes to full desynchronization)
                % 3) create TS1 with rate1 = rate2 = rate_tmp = rate * (1-percentage)
                % 4) TS1 = [TS1 TS_share], TS2 = [TS2 TS_share], (rate1 = rate1 + rate_share)
                % -> each spike in TS1 and TS2 are center points of bursts
                % 5) each center point is filled with N spikes -> N=poissrnd(8)
                % 6) Position of each spike relative to center piont:
                % uniform distribution [-1 +1] -> rand()*2-1
                rate_share = rate * (1-percentage); % calculate new spike rate for the shared spike train (=spikes that are in TS1 and TS2)
                TS_share = getSpikeTrainPoisson3(rate_share,rec_dur,1); % rate, rec_dur, numEl
                rate_tmp = rate * percentage; % spike rate for second spike train (without shared spikes)
                TS_tmp = getSpikeTrainPoisson3(rate_tmp,rec_dur,1); % rate, rec_dur, numEl
                TS1 = sort([TS_share; TS_tmp]);
                TS_tmp = getSpikeTrainPoisson3(rate_tmp,rec_dur,1); % rate, rec_dur, numEl
                TS2 = sort([TS_share; TS_tmp]);
                
                % fill spikes around burst center points
                N_TS1=length(TS1);
                for i=1:N_TS1
                    N=poissrnd(8);
                    TS1(end+1:end+N)= (rand(N,1)*2-1) + TS1(i);
                end
                TS1=sort(TS1);
                
                N_TS2=length(TS2);
                for i=1:N_TS2
                    N=poissrnd(8);
                    TS2(end+1:end+N)= (rand(N,1)*2-1) + TS2(i); % *2 = burstlength of 2 s
                end
                TS2=sort(TS2);
                
                Cell_TS{1}=TS1;
                Cell_TS{2}=TS2;
                M_TS = TS_Cell2M(Cell_TS);
            end
            
            
            % TS1: burst in burst signal, TS2: smallest bursts jittered
            if strcmp(shuffleMethod{m},'bursts_in_bursts2')
                rate=0.5;
                rec_dur=300;
                TS = 1:1/rate:rec_dur-1/rate; % ISI=2s;
                
                SIB=3; % spikes per bursts
                ISI_fraction=0.1; % 10% of original ISI of TS is used as ISI in bursts
                jitter=percentage; % 0 ... 1
                [TS2] = getBurstsfromTS(TS,SIB,ISI_fraction,0); % ISI=0.2s
                [TS2] = getBurstsfromTS(TS2,SIB,ISI_fraction,jitter); % ISI=0.02s, e.g.: if 100%: "jitter"=1, jitter = [0, 0.02]*percentage
                
                [TS1] = getBurstsfromTS(TS,SIB,ISI_fraction,0);
                [TS1] = getBurstsfromTS(TS1,SIB,ISI_fraction,0);
                
                Cell_TS{1}=TS1;
                Cell_TS{2}=TS2;
                M_TS = TS_Cell2M(Cell_TS);
                
                % SyncMeasure_Contrast(M_TS,rec_dur,2,1)
            end
            
            
            %% save files
            folder_name = ['Data_Shuffled' filesep num2str(m) '-' shuffleMethod{m} filesep num2str(n) '-N' filesep]; % ShuffledData/ShuffleMethod/N
            if ~exist(folder_name,'dir')
                mkdir(folder_name);
            end
            filename=num2str(p);
            S.M_TS = M_TS;
            S.rec_dur=rec_dur;
            S.percentage = percentage;
            S.percentage_index = p;
            save([folder_name filename], 'S')
            disp(['saved: ' folder_name filename])
            
        end % END: for all percentages
    end % END: for all samples n
end % END: for all shuffling methods
disp('finished')